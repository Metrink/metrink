/* Generated By:JJTree&JavaCC: Do not edit this line. MetrinkParserConstants.java */
package com.metrink.grammar.javacc;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MetrinkParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 9;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 10;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 11;
  /** RegularExpression Id. */
  int BREAK = 13;
  /** RegularExpression Id. */
  int BYTE = 14;
  /** RegularExpression Id. */
  int CONTINUE = 15;
  /** RegularExpression Id. */
  int DO = 16;
  /** RegularExpression Id. */
  int DEF = 17;
  /** RegularExpression Id. */
  int ELSE = 18;
  /** RegularExpression Id. */
  int FALSE = 19;
  /** RegularExpression Id. */
  int FOR = 20;
  /** RegularExpression Id. */
  int IF = 21;
  /** RegularExpression Id. */
  int NULL = 22;
  /** RegularExpression Id. */
  int RETURN = 23;
  /** RegularExpression Id. */
  int TRUE = 24;
  /** RegularExpression Id. */
  int VAR = 25;
  /** RegularExpression Id. */
  int WHILE = 26;
  /** RegularExpression Id. */
  int METRIC = 27;
  /** RegularExpression Id. */
  int M = 28;
  /** RegularExpression Id. */
  int TO = 29;
  /** RegularExpression Id. */
  int LPAREN = 30;
  /** RegularExpression Id. */
  int RPAREN = 31;
  /** RegularExpression Id. */
  int LBRACE = 32;
  /** RegularExpression Id. */
  int RBRACE = 33;
  /** RegularExpression Id. */
  int LBRACKET = 34;
  /** RegularExpression Id. */
  int RBRACKET = 35;
  /** RegularExpression Id. */
  int COLON = 36;
  /** RegularExpression Id. */
  int SEMICOLON = 37;
  /** RegularExpression Id. */
  int COMMA = 38;
  /** RegularExpression Id. */
  int DOT = 39;
  /** RegularExpression Id. */
  int AT = 40;
  /** RegularExpression Id. */
  int ASSIGN = 41;
  /** RegularExpression Id. */
  int LT = 42;
  /** RegularExpression Id. */
  int GT = 43;
  /** RegularExpression Id. */
  int BANG = 44;
  /** RegularExpression Id. */
  int EQ = 45;
  /** RegularExpression Id. */
  int LE = 46;
  /** RegularExpression Id. */
  int GE = 47;
  /** RegularExpression Id. */
  int NE = 48;
  /** RegularExpression Id. */
  int OR = 49;
  /** RegularExpression Id. */
  int DOUBLE_PIPE = 50;
  /** RegularExpression Id. */
  int AND = 51;
  /** RegularExpression Id. */
  int DOUBLE_AMP = 52;
  /** RegularExpression Id. */
  int INCR = 53;
  /** RegularExpression Id. */
  int DECR = 54;
  /** RegularExpression Id. */
  int PLUS = 55;
  /** RegularExpression Id. */
  int MINUS = 56;
  /** RegularExpression Id. */
  int STAR = 57;
  /** RegularExpression Id. */
  int SLASH = 58;
  /** RegularExpression Id. */
  int REM = 59;
  /** RegularExpression Id. */
  int PLUSASSIGN = 60;
  /** RegularExpression Id. */
  int MINUSASSIGN = 61;
  /** RegularExpression Id. */
  int STARASSIGN = 62;
  /** RegularExpression Id. */
  int SLASHASSIGN = 63;
  /** RegularExpression Id. */
  int REMASSIGN = 64;
  /** RegularExpression Id. */
  int PIPE = 65;
  /** RegularExpression Id. */
  int COPY_PIPE = 66;
  /** RegularExpression Id. */
  int AMP = 67;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 68;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 69;
  /** RegularExpression Id. */
  int SINGLE_QUOTE_STRING_LITERAL = 70;
  /** RegularExpression Id. */
  int DOUBLE_QUOTE_STRING_LITERAL = 71;
  /** RegularExpression Id. */
  int TIME_INDICATOR = 72;
  /** RegularExpression Id. */
  int PM_INDICATOR = 73;
  /** RegularExpression Id. */
  int AM_INDICATOR = 74;
  /** RegularExpression Id. */
  int IDENTIFIER = 75;
  /** RegularExpression Id. */
  int LETTER = 76;
  /** RegularExpression Id. */
  int DIGIT = 77;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 2;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"//\"",
    "<token of kind 7>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 12>",
    "\"break\"",
    "\"byte\"",
    "\"continue\"",
    "\"do\"",
    "\"def\"",
    "\"else\"",
    "<FALSE>",
    "\"for\"",
    "\"if\"",
    "\"null\"",
    "\"return\"",
    "<TRUE>",
    "\"var\"",
    "\"while\"",
    "\"metric\"",
    "\"m\"",
    "\"to\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\":\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"@\"",
    "\"=\"",
    "\"<\"",
    "\">\"",
    "\"!\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"or\"",
    "\"||\"",
    "\"and\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"|\"",
    "\">|\"",
    "\"&\"",
    "<INTEGER_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<SINGLE_QUOTE_STRING_LITERAL>",
    "<DOUBLE_QUOTE_STRING_LITERAL>",
    "<TIME_INDICATOR>",
    "<PM_INDICATOR>",
    "<AM_INDICATOR>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
  };

}
